-> echo hello git
-> mkdir sql_reference
-> cd sql_reference
-> git init
-> ls -a
-> git status
-> git checkout -b main
-> git status
-> touch README.md
-> git status
-> git add README.md
-> git status
-> touch sql_reference.json
-> git status
-> git add sql_reference.json
-> git status
-> git commit -m "Initial commit"
-> git status
-> git log
-> git status
-> git diff
-> git add sql_reference.json
-> git status
-> git commit -m "feat: add create database reference"
-> git log
-> git status
-> git diff
-> git add sql_reference.json
-> git commit -m "feat: add drop database reference"
-> git log
-> git branch
-> git branch feat/add-create-table-reference
-> git branch
-> git checkout feat/add-create-table-reference
-> git branch
-> git status
-> git diff
-> git add sql_reference.json
-> git commit -m "feat: add create table reference"
-> git log <- And then back out of this
-> git log --oneline <- To view the content of the entire git log 
-> git checkout main
-> git log --oneline
-> git branch
-> git merge feat/add-create-table-reference
-> git log --oneline
-> git branch -d feat/add-create-table-reference
-> git branch
-> git checkout -b feat/add-drop-table-reference
-> git status
-> git diff
-> git add sql_reference.json
-> git commit -m "feat: add drop table reference"
-> git checkout main
-> git branch
-> git merge feat/add-drop-table-reference
-> git branch -d feat/add-drop-table-reference
-> git checkout -b feat/add-column-references
-> git diff
-> git add sql_reference.json
-> git commit -m "feat: add column reference"
-> git log --oneline
-> git checkout main
-> git checkout -b fix/create-table-syntax
-> git add sql_reference.json
-> git commit -m "fix: create table syntax"
-> git checkout main
-> git branch
-> git merge fix/create-table-syntax
-> git log --oneline
-> git branch -d fix/create-table-syntax
-> git checkout feat/add-column-references
-> git log --oneline
-> git rebase main
-> git log --oneline
-> git add sql_reference.json
-> git commit -m "feat: add drop column reference"
-> git log --oneline
-> git checkout main
-> git checkout -b feat/add-insert-row-reference
-> git add sql_reference.json
-> git commit -m "feat: add insert row reference"
-> git checkout main
-> git branch
-> git merge feat/add-insert-row-reference
-> git checkout feat/add-column-references
-> git rebase main
-> git status
-> git add sql_reference.json
-> git status
-> git rebase --continue
-> git log --oneline
-> git add sql_reference.json
-> git commit -m "feat: add rename column reference"
-> git checkout feat/add-insert-row-reference
-> git status
-> git stash
-> git status
-> git stash list
-> git stash pop
-> git stash list
-> git stash
-> git stash list
-> git stash show
-> git stash show -p
-> git stash apply
-> git stash list
-> git stash
-> git stash list
-> git stash show stash@{1}
-> git stash show -p stash@{1}
-> git stash drop
-> git stash list
-> git checkout main
-> git branch -d feat/add-insert-row-reference
-> git checkout -b feat/add-more-row-references
-> git stash list
-> git stash pop
-> git stash list
-> git diff
-> git add sql_reference.json
-> git commit -m "feat: add update row reference"
-> git checkout main
-> git merge feat/add-more-row-references
-> git checkout feat/add-column-references
-> git rebase main
-> git status
-> git add sql_reference.json
-> git status
-> git rebase --continue
-> git log --oneline
-> git add sql_reference.json
-> git commit -m "feat: add primary key reference"
-> git add sql_reference.json
-> git commit -m "feat: add foreign key reference"
-> git checkout feat/add-more-row-references
-> git add sql_reference.json
-> git commit -m "feat: add delete row reference"
-> git checkout main
-> git merge feat/add-more-row-references
-> git branch -d feat/add-more-row-references
-> git checkout -b fix/add-missing-rename-references
-> git add sql_reference.json
-> git commit -m "fix: add missing rename database reference"
-> git checkout feat/add-column-references
-> git rebase main
-> git add sql_reference.json
-> git status
-> git rebase --continue
-> git add sql_reference.json
-> git commit -m "feat: add unique reference"
-> git reset HEAD~1
-> git log --oneline
-> git status
-> git diff <- Then q out of it 
-> git add sql_reference.json
-> git commit -m "feat: add unique reference"
-> git revert HEAD
-> git log --oneline
-> git show
-> git show HEAD~1
-> git rebase --interactive HEAD~2 
	-> Then deleting the last two commits by changing 'pick' to 'drop'
-> git log --one line
-> git rebase --interactive --root
-> then we are changing one of the commit messages using reword, by adding an s to the end of it  
-> git log --oneline
-> git rebase main
-> git log --oneline
-> git rebase --interactive HEAD~5
-> Then squashing together five commit messages
-> git log --oneline
-> git log -1
-> git checkout main
-> git merge feat/add-column-references
-> git branch -d feat/add-column-references
-> git checkout fix/add-missing-rename-references
-> git rebase main
-> git log -5 --oneline
-> git add sql_reference.json
-> git log --oneline -5
-> git rebase --interactive HEAD~2 <- To view the last two commits 
	-> There are a list of the different 
-> git rebase --interactive HEAD~2
	-> We are then squashing the last two commits into one  
-> When you make changes to a file, you will be prompted to (in this case) add a comment explaining a change which was made
-> git log -1
-> git checkout main
-> git merge fix/add-missing-rename-references
-> git branch
-> git branch -d fix/add-missing-rename-references
-> git log --oneline
-> git checkout -b feat/add-gitignore
-> touch .env
-> touch .gitignore
-> git status
-> code .gitignore
-> echo .env > .gitignore
-> git status
-> git add .gitignore
-> git commit -m "feat: add .gitignore" 
-> touch sample.env
-> git status
-> echo SECRET= > sample.env 
-> git add sample.env
-> git commit -m "feat: add sample.env"
-> git log -5 --oneline
-> git rebase --interactive HEAD~2
-> git log -1
-> git checkout main
-> git merge feat/add-gitignore
-> git branch -d feat/add-gitignore
-> git log --oneline